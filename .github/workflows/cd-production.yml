# CD Pipeline ISMAIL Platform - Production
# D√©ploiement s√©curis√© en production avec approbations

name: üöÄ Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  ENVIRONMENT: prod
  NAMESPACE: ismail-prod
  REGISTRY: ghcr.io
  CLUSTER_NAME: ismail-prod-cluster
  REGION: eu-west-1

jobs:
  # =====================================================
  # VALIDATION ET APPROBATION
  # =====================================================
  
  pre-production-validation:
    name: üîç Pre-production Validation
    runs-on: ubuntu-latest
    environment: 
      name: production-approval
      url: https://prod.ismail-platform.com
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üìù Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${VERSION}"
      
      - name: üîç Validate version format
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.0.0"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"
      
      - name: üîç Check staging deployment
        id: validation
        run: |
          # V√©rifier que la version a √©t√© test√©e en staging
          STAGING_STATUS=$(gh api repos/${{ github.repository }}/deployments \
            --jq ".[] | select(.environment == \"staging\" and .ref == \"${{ steps.version.outputs.version }}\") | .statuses_url" \
            | head -1)
          
          if [[ -n "$STAGING_STATUS" ]] || [[ "${{ github.event.inputs.skip_tests }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Staging validation passed or skipped"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Version not validated in staging"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =====================================================
  # BACKUP PR√â-D√âPLOIEMENT
  # =====================================================
  
  pre-deployment-backup:
    name: üíæ Pre-deployment Backup
    runs-on: ubuntu-latest
    needs: [pre-production-validation]
    if: needs.pre-production-validation.outputs.should_deploy == 'true'
    
    steps:
      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
      
      - name: üîß Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: üîó Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }}
      
      - name: üíæ Backup database
        run: |
          # Cr√©er un backup de la base de donn√©es
          BACKUP_NAME="ismail-prod-backup-$(date +%Y%m%d-%H%M%S)"
          
          # Backup PostgreSQL
          kubectl exec -n ${{ env.NAMESPACE }} deployment/postgres -- \
            pg_dump -U ${{ secrets.PROD_DB_USERNAME }} -h localhost ismail_main > /tmp/${BACKUP_NAME}.sql
          
          # Upload vers S3
          aws s3 cp /tmp/${BACKUP_NAME}.sql s3://${{ secrets.BACKUP_BUCKET }}/database/${BACKUP_NAME}.sql
          
          echo "Database backup created: ${BACKUP_NAME}.sql"
      
      - name: üíæ Backup configurations
        run: |
          # Backup des configurations Kubernetes
          BACKUP_NAME="k8s-config-backup-$(date +%Y%m%d-%H%M%S)"
          
          kubectl get all -n ${{ env.NAMESPACE }} -o yaml > /tmp/${BACKUP_NAME}-resources.yaml
          kubectl get configmaps -n ${{ env.NAMESPACE }} -o yaml > /tmp/${BACKUP_NAME}-configmaps.yaml
          kubectl get secrets -n ${{ env.NAMESPACE }} -o yaml > /tmp/${BACKUP_NAME}-secrets.yaml
          
          # Upload vers S3
          aws s3 cp /tmp/${BACKUP_NAME}-resources.yaml s3://${{ secrets.BACKUP_BUCKET }}/k8s/${BACKUP_NAME}-resources.yaml
          aws s3 cp /tmp/${BACKUP_NAME}-configmaps.yaml s3://${{ secrets.BACKUP_BUCKET }}/k8s/${BACKUP_NAME}-configmaps.yaml
          aws s3 cp /tmp/${BACKUP_NAME}-secrets.yaml s3://${{ secrets.BACKUP_BUCKET }}/k8s/${BACKUP_NAME}-secrets.yaml
          
          echo "Kubernetes backup created: ${BACKUP_NAME}"

  # =====================================================
  # D√âPLOIEMENT BLUE-GREEN
  # =====================================================
  
  deploy-blue-green:
    name: üîÑ Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [pre-production-validation, pre-deployment-backup]
    
    strategy:
      matrix:
        service: [auth-service, wallet-service]
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-production-validation.outputs.version }}
      
      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
      
      - name: üîß Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: üîó Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }}
      
      - name: üîµ Deploy Blue environment
        run: |
          # D√©ployer la nouvelle version en parall√®le (Blue)
          VERSION=${{ needs.pre-production-validation.outputs.version }}
          
          # Cr√©er le d√©ploiement Blue
          envsubst < infrastructure/k8s/services/${{ matrix.service }}/deployment.yaml | \
            sed "s/${{ matrix.service }}/${{ matrix.service }}-blue/g" | \
            kubectl apply -f - -n ${{ env.NAMESPACE }}
          
          # Attendre que le d√©ploiement Blue soit pr√™t
          kubectl rollout status deployment/${{ matrix.service }}-blue -n ${{ env.NAMESPACE }} --timeout=600s
        env:
          IMAGE_TAG: ${{ needs.pre-production-validation.outputs.version }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          NAMESPACE: ${{ env.NAMESPACE }}
      
      - name: üß™ Test Blue environment
        run: |
          # Tests de sant√© sur l'environnement Blue
          BLUE_SERVICE_IP=$(kubectl get service ${{ matrix.service }}-blue -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.clusterIP}')
          
          # Test de sant√©
          kubectl run health-check-blue --image=curlimages/curl --rm -i --restart=Never -- \
            curl -f http://$BLUE_SERVICE_IP:8080/actuator/health
          
          # Tests fonctionnels basiques
          kubectl run functional-test-blue --image=curlimages/curl --rm -i --restart=Never -- \
            curl -f http://$BLUE_SERVICE_IP:8080/actuator/info
      
      - name: üîÑ Switch to Blue (Green ‚Üí Blue)
        run: |
          # Basculer le trafic vers Blue
          kubectl patch service ${{ matrix.service }} -n ${{ env.NAMESPACE }} \
            -p '{"spec":{"selector":{"version":"blue"}}}'
          
          echo "Traffic switched to Blue environment for ${{ matrix.service }}"
      
      - name: ‚è±Ô∏è Monitoring period
        run: |
          echo "Monitoring Blue environment for 5 minutes..."
          sleep 300
          
          # V√©rifier les m√©triques et logs
          kubectl logs -l app=${{ matrix.service }},version=blue -n ${{ env.NAMESPACE }} --tail=100
      
      - name: üóëÔ∏è Cleanup Green environment
        run: |
          # Supprimer l'ancien d√©ploiement (Green)
          kubectl delete deployment ${{ matrix.service }}-green -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete service ${{ matrix.service }}-green -n ${{ env.NAMESPACE }} --ignore-not-found=true
          
          # Renommer Blue en production
          kubectl patch deployment ${{ matrix.service }}-blue -n ${{ env.NAMESPACE }} \
            -p '{"metadata":{"name":"${{ matrix.service }}"}}'

  # =====================================================
  # TESTS POST-D√âPLOIEMENT
  # =====================================================
  
  post-deployment-tests:
    name: üß™ Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-blue-green]
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: üß™ Production smoke tests
        run: |
          cd tests/smoke
          chmod +x run-smoke-tests.sh
          ./run-smoke-tests.sh production
        env:
          BASE_URL: ${{ secrets.PROD_BASE_URL }}
      
      - name: ‚ö° Production load tests
        run: |
          cd tests/performance
          k6 run --duration 10m --vus 100 production-load-test.js
        env:
          BASE_URL: ${{ secrets.PROD_BASE_URL }}
      
      - name: üìä Validate metrics
        run: |
          # V√©rifier les m√©triques Prometheus
          curl -s "${{ secrets.PROD_PROMETHEUS_URL }}/api/v1/query?query=up{job=\"ismail-services\"}" | \
            jq '.data.result[] | select(.value[1] != "1")' | \
            if read; then echo "‚ùå Some services are down"; exit 1; else echo "‚úÖ All services up"; fi

  # =====================================================
  # NOTIFICATION ET DOCUMENTATION
  # =====================================================
  
  notify-production-deployment:
    name: üì¢ Notify Production Deployment
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always()
    
    steps:
      - name: üìä Get deployment status
        id: status
        run: |
          if [[ "${{ needs.post-deployment-tests.result }}" == "success" ]]; then
            echo "status=‚úÖ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi
      
      - name: üì¢ Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#production-deployments",
              "username": "ISMAIL Production Bot",
              "icon_emoji": ":rocket:",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "title": "üöÄ ISMAIL Production Deployment",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "${{ steps.status.outputs.status }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ needs.pre-production-validation.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "Production",
                      "short": true
                    },
                    {
                      "title": "Deployed by",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Application",
                      "url": "${{ secrets.PROD_BASE_URL }}"
                    },
                    {
                      "type": "button",
                      "text": "View Monitoring",
                      "url": "${{ secrets.PROD_GRAFANA_URL }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
      
      - name: üìß Email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.sendgrid.net
          server_port: 587
          username: apikey
          password: ${{ secrets.SENDGRID_API_KEY }}
          subject: "üöÄ ISMAIL Production Deployment - ${{ steps.status.outputs.status }}"
          to: ${{ secrets.PRODUCTION_NOTIFICATION_EMAILS }}
          from: deployments@ismail-platform.com
          body: |
            ISMAIL Production Deployment Report
            
            Status: ${{ steps.status.outputs.status }}
            Version: ${{ needs.pre-production-validation.outputs.version }}
            Deployed by: ${{ github.actor }}
            Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            
            Application: ${{ secrets.PROD_BASE_URL }}
            Monitoring: ${{ secrets.PROD_GRAFANA_URL }}
            
            Deployment Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        if: always()
