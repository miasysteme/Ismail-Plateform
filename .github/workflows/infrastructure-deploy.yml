# CI/CD Pipeline - D√©ploiement Infrastructure ISMAIL
# D√©ploiement automatis√© de l'infrastructure sur AWS

name: Infrastructure Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      auto_approve:
        description: 'Auto-approve Terraform changes'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: af-south-1
  TERRAFORM_VERSION: 1.6.0
  KUBECTL_VERSION: v1.28.0
  HELM_VERSION: v3.13.0

jobs:
  # Job de validation
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Format Check
      working-directory: infrastructure/terraform
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      working-directory: infrastructure/terraform
      run: |
        terraform init -backend=false
    
    - name: Terraform Validate
      working-directory: infrastructure/terraform
      run: terraform validate
    
    - name: Validate Kubernetes manifests
      run: |
        # Installation de kubeval pour validation
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
        
        # Validation des manifests
        find infrastructure/kubernetes -name "*.yaml" -exec kubeval {} \;
    
    - name: Validate Helm charts
      run: |
        # Installation de Helm
        curl https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz | tar xz
        sudo mv linux-amd64/helm /usr/local/bin/
        
        # Validation des charts
        helm lint infrastructure/helm/*/

  # Job de planification Terraform
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      working-directory: infrastructure/terraform
      run: |
        terraform init \
          -backend-config="bucket=ismail-terraform-state-${{ matrix.environment }}" \
          -backend-config="key=infrastructure/${{ matrix.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
    
    - name: Terraform Plan
      working-directory: infrastructure/terraform
      run: |
        terraform plan \
          -var="environment=${{ matrix.environment }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -out=tfplan \
          -detailed-exitcode
      continue-on-error: true
      id: plan
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: infrastructure/terraform/tfplan
        retention-days: 5
    
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infrastructure/terraform/tfplan.txt', 'utf8');
          
          const output = `#### Terraform Plan for ${{ matrix.environment }} üìñ
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${plan}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # Job de d√©ploiement
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch')
    
    environment: 
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Make deployment script executable
      run: chmod +x infrastructure/scripts/deploy-infrastructure.sh
    
    - name: Deploy Infrastructure
      env:
        ENVIRONMENT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
        AUTO_APPROVE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.auto_approve || 'true' }}
        SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        ./infrastructure/scripts/deploy-infrastructure.sh $ENVIRONMENT
    
    - name: Get deployment outputs
      id: outputs
      working-directory: infrastructure/terraform
      run: |
        echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
        echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
        echo "kong_endpoint=$(kubectl get service kong-kong-proxy -n ismail-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo 'pending')" >> $GITHUB_OUTPUT
    
    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}';
          const environment = '${{ env.ENVIRONMENT }}';
          const clusterName = '${{ steps.outputs.outputs.cluster_name }}';
          const kongEndpoint = '${{ steps.outputs.outputs.kong_endpoint }}';
          
          const message = status === 'success' 
            ? `‚úÖ Infrastructure deployed successfully to ${environment}!\n\n**Cluster:** ${clusterName}\n**API Gateway:** ${kongEndpoint}`
            : `‚ùå Infrastructure deployment failed for ${environment}`;
          
          // Cr√©er une issue ou commenter selon le contexte
          if (context.payload.pull_request) {
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }

  # Job de tests post-d√©ploiement
  test:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Configure kubectl
      env:
        ENVIRONMENT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ismail-cluster
    
    - name: Test cluster connectivity
      run: |
        kubectl cluster-info
        kubectl get nodes
        kubectl get pods --all-namespaces
    
    - name: Test Kong API Gateway
      run: |
        # Attendre que Kong soit pr√™t
        kubectl wait --for=condition=Ready pods -l app=kong-kong -n ismail-ingress --timeout=300s
        
        # Test de sant√© Kong
        kubectl port-forward -n ismail-ingress svc/kong-kong-admin 8001:8001 &
        sleep 10
        
        curl -f http://localhost:8001/status || exit 1
        
        pkill -f "kubectl port-forward" || true
    
    - name: Test Prometheus stack
      run: |
        # V√©rifier que Prometheus est accessible
        kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=prometheus -n ismail-monitoring --timeout=300s
        
        # Test de sant√© Grafana
        kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=grafana -n ismail-monitoring --timeout=300s

  # Job de notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, test]
    if: always()
    
    steps:
    - name: Notify Slack
      if: env.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy.result == 'success' && needs.test.result == 'success' && 'success' || 'failure' }}
        channel: '#deployments'
        username: 'GitHub Actions'
        icon_emoji: ':rocket:'
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          Infrastructure deployment ${{ needs.deploy.result == 'success' && needs.test.result == 'success' && 'completed successfully' || 'failed' }}
          Environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
