# CI Pipeline ISMAIL Platform
# Tests, Build, Quality Gates et Security Scans

name: 🚀 ISMAIL CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Scan sécurité quotidien à 2h du matin
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ismail-platform
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  # =====================================================
  # ANALYSE STATIQUE ET SÉCURITÉ
  # =====================================================
  
  code-analysis:
    name: 📊 Code Analysis & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: java, javascript
          queries: security-extended,security-and-quality
      
      - name: 🏗️ Build for analysis
        run: |
          cd services/auth-service
          mvn clean compile -DskipTests
          cd ../wallet-service
          mvn clean compile -DskipTests
      
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =====================================================
  # TESTS UNITAIRES
  # =====================================================
  
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, wallet-service]
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: 🧪 Run unit tests
        run: |
          cd services/${{ matrix.service }}
          mvn clean test -Dspring.profiles.active=test
      
      - name: 📊 Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 📋 ${{ matrix.service }} Test Results
          path: services/${{ matrix.service }}/target/surefire-reports/*.xml
          reporter: java-junit
      
      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # =====================================================
  # TESTS D'INTÉGRATION
  # =====================================================
  
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ismail_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: 🔗 Run integration tests
        run: |
          cd tests/integration
          mvn clean verify -Dspring.profiles.active=test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      
      - name: 📊 Upload integration test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 📋 Integration Test Results
          path: tests/integration/target/surefire-reports/*.xml
          reporter: java-junit

  # =====================================================
  # QUALITY GATES
  # =====================================================
  
  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: 📊 SonarQube analysis
        run: |
          cd services/auth-service
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=ismail-auth-service \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          
          cd ../wallet-service
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=ismail-wallet-service \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
      - name: 🎯 Quality Gate check
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # =====================================================
  # BUILD ET PUSH IMAGES DOCKER
  # =====================================================
  
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [auth-service, wallet-service]
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: 🏗️ Build application
        run: |
          cd services/${{ matrix.service }}
          mvn clean package -DskipTests
      
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =====================================================
  # TESTS DE PERFORMANCE
  # =====================================================
  
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: ⚡ Run performance tests
        run: |
          cd tests/performance
          k6 run --duration 5m --vus 50 auth-load-test.js
          k6 run --duration 5m --vus 50 wallet-load-test.js
        env:
          BASE_URL: ${{ secrets.STAGING_BASE_URL || 'http://localhost:8080' }}
      
      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: tests/performance/results/

  # =====================================================
  # NOTIFICATION
  # =====================================================
  
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [code-analysis, unit-tests, integration-tests, quality-gate, build-images]
    if: always()
    
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          username: 'ISMAIL CI Bot'
          icon_emoji: ':robot_face:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚀 ISMAIL CI Pipeline completed
            
            📊 Results:
            - Code Analysis: ${{ needs.code-analysis.result }}
            - Unit Tests: ${{ needs.unit-tests.result }}
            - Integration Tests: ${{ needs.integration-tests.result }}
            - Quality Gate: ${{ needs.quality-gate.result }}
            - Build Images: ${{ needs.build-images.result }}
            
            🔗 Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
