# ISMAIL Platform - Script de D√©ploiement PowerShell
# Ce script pr√©pare et d√©ploie la plateforme ISMAIL sur Windows

param(
    [switch]$SkipTests,
    [switch]$SkipPush,
    [switch]$Force
)

# Fonction pour afficher les messages color√©s
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    } else {
        $input | Write-Output
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Log-Info($message) {
    Write-ColorOutput Blue "[INFO] $message"
}

function Log-Success($message) {
    Write-ColorOutput Green "[SUCCESS] $message"
}

function Log-Warning($message) {
    Write-ColorOutput Yellow "[WARNING] $message"
}

function Log-Error($message) {
    Write-ColorOutput Red "[ERROR] $message"
}

# V√©rification des pr√©requis
function Test-Prerequisites {
    Log-Info "V√©rification des pr√©requis..."
    
    # V√©rifier Git
    if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
        Log-Error "Git n'est pas install√© ou pas dans le PATH"
        exit 1
    }
    
    # V√©rifier Node.js
    if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
        Log-Error "Node.js n'est pas install√© ou pas dans le PATH"
        exit 1
    }
    
    # V√©rifier npm
    if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
        Log-Error "npm n'est pas install√© ou pas dans le PATH"
        exit 1
    }
    
    # V√©rifier les versions
    $nodeVersion = node --version
    $npmVersion = npm --version
    Log-Info "Node.js version: $nodeVersion"
    Log-Info "npm version: $npmVersion"
    
    Log-Success "Tous les pr√©requis sont satisfaits"
}

# Installation des d√©pendances
function Install-Dependencies {
    Log-Info "Installation des d√©pendances..."
    
    try {
        # D√©pendances racine
        Log-Info "Installation des d√©pendances racine..."
        npm install
        
        # D√©pendances backend
        Log-Info "Installation des d√©pendances backend..."
        Set-Location backend
        npm install
        Set-Location ..
        
        # D√©pendances frontend
        Log-Info "Installation des d√©pendances frontend..."
        Set-Location frontend
        npm install
        Set-Location ..
        
        Log-Success "Toutes les d√©pendances sont install√©es"
    }
    catch {
        Log-Error "Erreur lors de l'installation des d√©pendances: $_"
        exit 1
    }
}

# Construction des projets
function Build-Projects {
    Log-Info "Construction des projets..."
    
    try {
        # Build backend
        Log-Info "Construction du backend..."
        Set-Location backend
        if (Test-Path "package.json") {
            $packageJson = Get-Content "package.json" | ConvertFrom-Json
            if ($packageJson.scripts.build) {
                npm run build
            } else {
                Log-Warning "Script de build non trouv√© pour le backend"
            }
        }
        Set-Location ..
        
        # Build frontend
        Log-Info "Construction du frontend..."
        Set-Location frontend
        if (Test-Path "package.json") {
            $packageJson = Get-Content "package.json" | ConvertFrom-Json
            if ($packageJson.scripts.build) {
                npm run build
            } else {
                Log-Warning "Script de build non trouv√© pour le frontend"
            }
        }
        Set-Location ..
        
        Log-Success "Construction termin√©e avec succ√®s"
    }
    catch {
        Log-Error "Erreur lors de la construction: $_"
        exit 1
    }
}

# Ex√©cution des tests
function Invoke-Tests {
    if ($SkipTests) {
        Log-Warning "Tests ignor√©s (param√®tre -SkipTests)"
        return
    }
    
    Log-Info "Ex√©cution des tests..."
    
    try {
        # Tests backend
        Set-Location backend
        if (Test-Path "package.json") {
            $packageJson = Get-Content "package.json" | ConvertFrom-Json
            if ($packageJson.scripts.test) {
                Log-Info "Tests backend..."
                npm test
            }
        }
        Set-Location ..
        
        # Tests frontend
        Set-Location frontend
        if (Test-Path "package.json") {
            $packageJson = Get-Content "package.json" | ConvertFrom-Json
            if ($packageJson.scripts.test) {
                Log-Info "Tests frontend..."
                npm test
            }
        }
        Set-Location ..
        
        Log-Success "Tous les tests sont pass√©s"
    }
    catch {
        Log-Error "Erreur lors des tests: $_"
        if (-not $Force) {
            exit 1
        }
    }
}

# Pr√©paration Git
function Prepare-Git {
    Log-Info "Pr√©paration pour Git..."
    
    try {
        # V√©rifier si on est dans un repo Git
        if (-not (Test-Path ".git")) {
            Log-Warning "Initialisation du repository Git..."
            git init
            git remote add origin https://github.com/miasysteme/Ismail-Plateform.git
        }
        
        # V√©rifier le statut Git
        $gitStatus = git status --porcelain
        if ($gitStatus) {
            Log-Info "Fichiers modifi√©s d√©tect√©s, ajout au staging..."
            git add .
            
            # Commit avec message automatique
            $commitMessage = "feat: deploy ISMAIL Platform v1.0.0 - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            git commit -m $commitMessage
        } else {
            Log-Warning "Aucun changement √† commiter"
        }
        
        Log-Success "Repository Git pr√©par√©"
    }
    catch {
        Log-Error "Erreur lors de la pr√©paration Git: $_"
        exit 1
    }
}

# Push vers GitHub
function Push-ToGitHub {
    if ($SkipPush) {
        Log-Warning "Push ignor√© (param√®tre -SkipPush)"
        return
    }
    
    Log-Info "Push vers GitHub..."
    
    try {
        # V√©rifier la branche actuelle
        $currentBranch = git branch --show-current
        Log-Info "Branche actuelle: $currentBranch"
        
        # Push vers GitHub
        git push -u origin $currentBranch
        
        Log-Success "Code pouss√© vers GitHub avec succ√®s"
    }
    catch {
        Log-Error "Erreur lors du push: $_"
        exit 1
    }
}

# V√©rification du d√©ploiement Render
function Test-RenderDeployment {
    Log-Info "V√©rification du d√©ploiement Render..."
    
    # Attendre quelques secondes
    Start-Sleep -Seconds 10
    
    $renderUrl = "https://ismail-plateform.onrender.com"
    
    try {
        Log-Info "Test de connectivit√© vers $renderUrl..."
        $response = Invoke-WebRequest -Uri "$renderUrl/health" -TimeoutSec 30 -ErrorAction Stop
        
        if ($response.StatusCode -eq 200) {
            Log-Success "D√©ploiement Render r√©ussi! Application accessible sur $renderUrl"
        }
    }
    catch {
        Log-Warning "Le d√©ploiement Render est en cours... Cela peut prendre quelques minutes."
        Log-Info "V√©rifiez le statut sur: https://dashboard.render.com"
    }
}

# Fonction principale
function Main {
    Write-Host "üöÄ ISMAIL Platform - Script de D√©ploiement PowerShell" -ForegroundColor Cyan
    Write-Host "======================================================" -ForegroundColor Cyan
    Write-Host ""
    
    Test-Prerequisites
    Install-Dependencies
    Build-Projects
    
    if (-not $SkipTests) {
        $runTests = Read-Host "Voulez-vous ex√©cuter les tests? (y/N)"
        if ($runTests -eq 'y' -or $runTests -eq 'Y') {
            Invoke-Tests
        }
    }
    
    Prepare-Git
    
    if (-not $SkipPush) {
        $pushToGit = Read-Host "Voulez-vous pousser vers GitHub? (y/N)"
        if ($pushToGit -eq 'y' -or $pushToGit -eq 'Y') {
            Push-ToGitHub
            Test-RenderDeployment
        } else {
            Log-Info "Push annul√©. Vous pouvez pousser manuellement avec: git push"
        }
    }
    
    Write-Host ""
    Log-Success "üéâ D√©ploiement termin√©!"
    Write-Host "üìä Dashboard Render: https://dashboard.render.com" -ForegroundColor Yellow
    Write-Host "üåê Application: https://ismail-plateform.onrender.com" -ForegroundColor Yellow
    Write-Host "üìö Repository: https://github.com/miasysteme/Ismail-Plateform" -ForegroundColor Yellow
}

# Ex√©cuter le script principal
Main
